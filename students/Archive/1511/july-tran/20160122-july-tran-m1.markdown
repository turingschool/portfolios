# July Tran - M1 Portfolio

### Mission
Coming into this module, my goal was to learn skills in programming. My mission has since shifted to include improving my soft skills and increasing my participation in both the Turing community and the community at large.

### Attendance

I was late to class (within 5 minutes) several times.

### Work

##### Individual projects:

#### Jungle Beat

* [GitHub URL](https://github.com/julyytran/jungle_beat)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/jungle_beat.markdown#learning-goals--areas-of-focus)

Jungle Beat uses a linked list to create a drum machine that a user can interact and play with.

Assessed by: Steve Kinney

Notes:

Scores:
* Functional Expectations: 1
* Test-Driven Development: 2
* Encapsulation/Breaking Logic into Components: 3
* Fundamental Ruby and Style: 2
* Looping or Recursion: 3

#### Enigma

* [GitHub URL](https://github.com/julyytran/enigma)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/enigma.markdown)

Enigma uses Ruby to build a tool for cracking an encryption algorithm.

Assessed by: Meeka Gayhart

Notes:
* July did a great job of demo-ing.
* July had an extension completed but a strange edge while we were demoing it came up. I told her if she could write a test for the edge case and fix it by EOD, I would count it. She did, so 4s all around.

Scores:
* Functional Expectations: 4
* Test-Driven Development: 4
* Encapsulation/Breaking Logic into Components: 4
* Fundamental Ruby and Style: 4

##### Collaborative projects:

#### HTTP Yeah You Know Me

* [GitHub URL](https://github.com/amaxwellblair/http_server)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/http_yeah_you_know_me.markdown)

This project involved building a web application capable of:

* Receiving a request from a user
* Comprehending the request's intent and source
* Generating a response
* Sending the response to the user

Assessed by: Horace Williams

Notes:
* Got solid implementation through iteration 4; a few hiccups in using the app but overall structure is pretty solid
* Code could be cleaned in several places on the method / line-of-code level; could do some method extraction and especially some clearer and more thorough naming of concepts and steps
* At a higher level I appreciate that the various classes have pretty clean input/output interfaces and this makes it easy to follow the flow from one object to another
* Top-level execution loop should probably go...somewhere - maybe into server class or even into another new object that would handle some of these jobs that span the entire "session"

Scores:
* Overall Functionality: 3
* Fundamental Ruby & Style: 3
* Test-Driven Development: 3
* Breaking Logic into Components: 3

#### Black Thursday

* [GitHub URL](https://github.com/julyytran/black_thursday)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/headcount.markdown)

This project analyzes CSV datasets for e-commerce-like purposes.

Assessed by: Horace

Notes:
* 125 tests
* sweet bash snippet to run tests
* completed I0 - I4
* overall structure is good; got good relationships; using repos to find appropriate data where needed
* generally could be more consistent about leveraging the relationships we have already constructed;
frequently we end up re-constructing a relationship from a different method
* handful of ruby style nitpicks here and there -- unnecessary local variable creation and unnecessary explicit boolean values
* analysis is pretty successful at leveraging existing relationships and record-level methods; keep pushing on these fronts to get as much logic as we can down into the record / model layer
* most analysis methods are pretty clean and concise; don't be afraid to extract more helper
methods when these start to get longer

Scores:
* Functional Expectations: 3
* Test_Drive Development: 3
* Encapsulation / Breaking Logic Into Components: 3
* Fundamental Ruby & Style: 3
* Enumerable & Collections: 3

## Review

### Mid module diagnostic

Assessed by: Josh Cheek

##### Notes
* `else` doesn't take a conditional (`else @human == true`)
* Probably read `@human = true` as "at human is assigned true"
  so you don't accidentally write it when you meant `@human == true`
* Make it a point to keep the indentation correct all the time. It will quickly pay off :)
* When you have two variables that always change together, see if there's a way to group them.
  Here, we can put `@human` and `@werewolf` together like this:

    ```ruby
    def werewolf?
      !human?
    end
    ```
* It'll be worth practicing these, get to the point where they're automated (you can do them blindfolded).
  You'll find many of the things that trip you up right now will be much easier afterwards.
* Make sure you see tests fail before seeing them pass
* Not using `mrspec` t.t
* Make names the kinds of things you could say to people in English, and they'd know what you mean.
* Practice using keyboard shortcuts:
  * `Command+Shift+[` to go to left tab left of the current one (eg between test and implementation)
  * `Command+Shift+]` to go to left tab right of the current one (eg between test and implementation)
  * `Command+tab`     to switch between the last 2 applications (eg Terminal and Atom)
  * `Command+k Command+arrow` in Atom to split the file into the other pane
  * `Command+k arrow` in Atom to jump between panes
  * `Command+Control+arrow` will allow you to move the current line up and down
* Nice use of C-a C-k to kill a line (I assume that's what you used, either way, nice)
* Collaborative!

Scores:
* Ruby Syntax & API: 3
* Fundamental Ruby & Style: 3
* Test-Driven Development: 3
* Workflow: 2
* Collaboration: 4

### End of Module Assessment

Assessed by: Josh Cheek

##### Notes
* Fixes syntax as soon as it gets off
* Knows where responsibilities belong
* `@score` is unnecessary
* When the conditional has the same value as the body of the if statement, you can just return the conditional
* We didn't need any enumerables
* Starts with a test
* Great test names!
* Pretty good implementations, consider the edge cases a little more
* Great job using the test names to guide thinking
* Good use of Atom shortcuts
  * (command + d)
  * indenting/outdenting
  * auto commenting/uncommenting
  * splitting windows
  * jumping betwen windows
* Keep it up!
* Good explanation of the problem
* Good thinking out loud

Scores:
* Ruby Syntax & API: 3
* Fundamental Ruby & Style: 3
* Test-Driven Development: 4-
* Workflow: 4
* Collaboration: 3

## Community

### Giving Feedback

For Alex: Alex is a good partner to work with. He takes his time to read the error message and think through the issue step-by-step. This has been helpful to me during our pairing sessions because I tend to move too fast. I appreciate Alex's encouraging attitude, his openness to helping others, and his curiosity about the world and eagerness to learn new things.

For Allan: Allan is a great partner to work with! We paired for most of our project and I greatly benefited from observing how he approaches figuring out unknowns. Allan was also very collaborative throughout the process, and did well in explaining his ideas. He has a tendency to move too quick at times, and may overlook some critical information in his haste. Allan's combination of skill, dedication, collaboration, communication, and fun, pleasant personality make him a great partner.

For Nate: Nate is a wonderful partner to work with! He is great at communication and brings a calming energy to the team. I also appreciate his easygoingness and supportiveness. Nate is competent in his skills and is a very dependable partner.  

For Matt Pindell: Matt is a radiating force of positivity and laughter in the cohort. He constantly has a positive attitude that uplifts everyone around him. I really admire and appreciate this quality in him. On several occasions, a Matt joke has uplifted my mood after long work hours.

### Feedback Received

From Alex: The first time I really got to know July was during our very first assigned pairing session for an exercise we had to do in class. I believe this was the first time I paired up with anyone in 1511 and I'm glad we paired up because I learned a lot as well. One of the things I learned from July was how important communication is when pairing up with July and I thank her for her openness to different ways of approaching a problem. I believe, by having that trait along the way towards being a professional software engineer, she will get along well with others during many future pairing sessions. - Alex Navarrete

From Allan: July is professional, intelligent and confident. Can easily step back and assess a situation then formulate a solution. Her light and airy demeanor allows for seamless collaboration. July should focus on turning her thought process into words. This will allow others to try and keep up with her quick wit and creativity.

From Nate: I had the opportunity to work with July on our Black Thursday project and I couldnâ€™t have asked for a better partner. July shows reliability, good communication, great organization, and demonstrates  competence in programing and logic. We quickly and organically fell into a good rhythm for pairing, and I look forward to having the opportunity to work with her again.

### Community Participation

I have participated in improv every week and have reached out to 1602 students. I also led a group retro session.

### Notes

* Solid assessment and individual projects
* Code-switching
* Would like to see more community engagement; people like being around you and having
you involved in activities -- you can make things happen and people will join
* You have a lot of potential both technically and organizationally -- want to see you start
to figure out what your interests are that go above and beyond the curricular expectations

### Outcome - PASS

* __A End-of-Module Assessment:__ 4
* __B Individual Work & Projects:__ 3
* __C Group Work & Projects:__ 3
* __D Community Participation:__ 3
* __E Peer & Instructor Feedback:__ 3

# Toni Rib - M1 Portfolio

## Individual

### Your Mission

My module one goal was to learn Ruby well enough to be able to write code in it without constantly having to reference documentation and to become comfortable with object-oriented design and test driven development. Both OO and TDD are  new to me so I wanted to get enough practice so that they both feel like second nature going forward.  I was also hoping to get much better at Ruby style, since I'm more used to coding with lots of comments and large 25 - 100 line functions.

### End of Module Assessment

Assessor: Rachel

#### Notes

* good explanations while implementing
* took small steps using TDD to drive development
* wrote tests to drive out false positives in tests
* able to think through potential edge cases
* able to predict errors before running tests
* comfortable with default arguments
* comfortable taking refactoring suggestions; talking through them and implementing
* quick with thought process and implementation
* comfortable using pry to check potential solutions

#### Scores

1. __Ruby Syntax & API:__ 3.5
2. __Ruby Style:__ 3.5
3. __Blocks & Enumerations:__ 4
4. __Testing:__ 4
5. __Workflow:__ 4
6. __Collaboration:__ 4

### Attendance

Left at 2pm on Friday, October 23rd because I was sick.

### Work

The following are individual projects:

#### Sorting Suite

* [GitHub URL](https://github.com/ToniRib/sorting-suite)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/sorting_suite.markdown)

Provides a suite of algorithms and tests for four types of sorting: bubble sort, insertion sort (including in-place), merge sort, and selection sort.

__Comments:__

1. Bubble sort
  * easy to read, simple implementation
  * tests pass, edge cases tested

2. Insertion sort
  * could be a bit easier to read, with loops and breaks.

3. Merge sort
  * beautifully written, simple implementation
  * tests pass, edge cases tested

4. All extras work, tests pass

__Scores:__

* Functional expectations: 4
* Testing: 4
* Ruby Style: 3
* Organization: 4

#### Night Writer

* [GitHub URL](https://github.com/ToniRib/night-writer)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/night_writer.markdown)

This project contains executables to convert a file with English text into a new file with translated braille text, and back again the other direction.

Reviewed by Jeff

__Comments:__

* 53 test
* Good test coverage, would like to see you push on edge cases a bit
* Really good implementation, good Ruby style
* Just keep doing it.

__Scores:__

* Overall Functionality: 3
* Fundamental Ruby & Style: 4
* Test-Driven Development: 4
* Breaking Logic into Components: 4

#### Binary Search Tree

* [GitHub URL](https://github.com/ToniRib/binary-search-tree)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/binary_search_tree.markdown)

The project creates a binary search tree by adding nodes (the first node being the 'head' node) with possible left and right links one at a time to the tree. A node is added to the left link if it is smaller than the current value and added to the right link if it is larger than the current value. The tree uses recursive methods that are located in the nodes, thus making each node 'intelligent' in that it passes along a query to one or both of its links.

Reviewed by Mike Dao

__Comments:__

* 127 tests, all pass.
* All extensions
* Code checks for data type and will only allow trees of matching types to be created.
* Good use of recursion
* Well tested, good, thorough tests, would like to have seen more sad path testing.
* Excellent use of exceptions

__Scores:__

* Functional Expectations: 4
* Test-Driven Development: 3
* Encapsulation / Breaking Logic into Components: 4
* Fundamental Ruby & Style: 4
* Enumerable & Collections: 3

#### Complete Me

* [GitHub URL](https://github.com/ToniRib/Complete_Me)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/complete_me.markdown)

Reviewed by Horace

This project simulates autocomplete functionality. It's basic design is a Trie data structure which uses branching nodes to create paths to words. Words can be added to the 'dictionary' one at a time or in bulk. Suggestions for a particular string are then found by recursively traversing the tree to the subtree that contains the search string and then locating any valid words (words that were added by the user) below that node on the tree. Words can be 'selected' so that words with more selections appear at the beginning of the array of suggestions. Words can also be searched for using a fuzzy search.

__Comments:__

* Nice work with the shoes; other base functionality also working good
* Added the inclusive fuzzy search as well
* Fancy error handling on various inputs
* Overall method tidyness and conciseness is strong
* General enumerable usage is solid; handful of cases where multiple different enumerables might be able to be consolidated

__Scores:__

* Functional Expectations: 4
* TDD: 4
* Ruby Style & Fundamentals: 4
* Encapsulation / Breaking Logic Into Components: 4
* Enumerable & Collections: 3

## Team

### Projects

The following are team projects:

#### HTTP, Yeah You Know Me

* [GitHub URL](https://github.com/ToniRib/http_yeah_you_know_me)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/http_yeah_you_know_me.markdown)

Project with Hector Huertas

Reviewed by Mike Dao

This project focuses on using HTTP to create a simple server that responds to GET and POST requests. GET requests can be sent directly from the browser address line while POST requests are generated and sent using the Google Chrome extension Postman.

__Comments:__

* 62 tests, all pass.
* One extension
* All functionality works.
* Well organized, code, things were broken out into separate methods in a good fashion.
* Think about class methods, and modules.

__Scores:__

* Overall Functionality: 4
* Fundamental Ruby & Style: 4
* Test-Driven Development: 3
* Breaking Logic into Components: 4

#### Headcount

* [GitHub URL](https://github.com/ToniRib/headcount)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/headcount.markdown)

Project with Aaron Greenspan

Reviewed by Horace

This project focused on using real data from the Colorado school districts to perform analysis. CSV files were read in and parsed so low level classes could use their data to find trends. A higher level 'Headcount Analyst' linked together various data to find trends across districts.

__Comments:__

* Excellent work overall; code is clean both at the low level (methods, lines, etc) and at the high level design
* Good use of abstractions around pulling out and manipulating data -- helps keep the analytical structure very clean
* Volumnious testing -- covering everything including various helper/data processing operations within the test suite
* Completes all iterations and the team seems to have spent a lot of time helping the group overall, including lots of spec harness contributions

__Scores:__

* Functional Expectations: 4
* TDD: 4
* Encapsulation / Breaking Logic into Components: 4
* Fundamental Ruby & Style: 4
* Enumerable & Collections: 4
* Sanitation: 4

## Community

### Giving Feedback

#### Feedback for Beth Secor

Beth is quick to understand new ideas and is great to pair with because you can have thorough discussions about different ways to solve a problem. She makes good use of pry and debugging techniques. We tend to get work done quickly and efficiently, and always with a few laughs!

#### Feedback for Aaron Greenspan

Aaron has outstanding motivation to learn. He always seems to be working on something new that is above and beyond what we are learning at Turing and it's really inspiring to other students. My only criticism is that he sometimes wants to solve a problem in the 'most interesting' way instead of what is the simplest and most readable to other people. His solutions are fantastic, but they are sometimes confusing for other people to follow.

#### Feedback for Hector Baeza

Hector made a great partner for a project because we had very thoughtful discussions about how to solve problems. He made me take a step back from always trying to push forward to really understand everything that was happening in each method. He's great at test driven development. If he could improve at one thing it would be explaining his ideas a little more thoroughly, because sometimes it took me multiple explanations to understand what he was getting at.

#### Feedback for Brenna Martenson

Brenna has very good attention to detail and is great at explaining her ideas. She makes a great team member and pair because she rarely gets frustrated and is always willing to listen, try out new ideas, and help others. I think if she spoke up more often, she would realize that she knows even more than she thinks she does about problem solving and programming.

### Being a Community Member

#### Feedback 1

Pairing with Toni is awesome because I always learn a lot from her. She is a fountain of knowledge about git and ruby, and many other things. She is easy to work with and I never feel left behind despite the fact that she is more knowledgeable than me at the moment.

#### Feedback 2

Working with Toni was a pleasure. I learned a lot with her about both programming and pairing. I really enjoyed our fluent communication and that we were free to discuss about any point of the approach or implementation. I love her result-oriented approach. She focuses on what matters and doesn’t waste time. As constructive criticism, she sometimes starts writing code before explaining what she is going to do, which joined with her fast thinking makes it quite hard to understand whats going on. Wrapping up, I’d love to have her as a partner again!

#### Feedback 3

It is my honest opinion that every single 1510er should pair with Toni on a project, and the sooner the better.  Not only is her problem solving ability fantastic, but her programming habits — from committing regularly to git hub, to her use of hot keys and short cuts, to her serious commitment to TDD — are unmatched in any of the students I have yet met at Turing.  Seeing her work has been the perfect complement to the lectures on methodology and has really driven in many of those lessons in an irreplaceable way.  Moving forward, I think Toni should be especially mindful of the gap between her understanding of programming and that of her fellow students.  It is perhaps an unfortunate fact that Toni’s first ideas are often the best ideas, and I was regularly disappointed that my (admittedly inferior) ideas never saw the light of day.  It will be tricky to do well, but I think Toni should consider allowing for ​*worse*​ code in her projects: in those cases where such code may provide a valuable learning experience, or a feeling of value, to her pair partner.

#### Feedback 4

Toni is by far one of the dopest people I have ever met! I think that it's so cool how she explained the String Theory and Theory of Relativity to me a couple weeks ago. I guess it goes to show that her communication skills are really on point. So if you end up reading this always remember that your biggest rival is your UCLA alternate universe self.

#### Feedback 5

Toni has been a source of inspiration to me throughout Module 1. We haven't had any official projects together, but the opportunities I have had to code with her have been very fluid and productive. Her ability to conceptually work through problems is a strong skill, and is immediately evident in the structure of her code. She is never afraid to speak her mind or challenge others to see things differently, which allows us all to feel more comfortable doing the same. Toni is consistently one of the first people to offer her time to help others and I look forward to working with her more in the future.

### Playing a Part

* made coffee 4 times throughout the module when it was empty
* put toilet paper in the bathroom twice when I noticed it had run out
* helped various people in module 1 with debugging when they were stuck
* organized a 1510 happy hour after turing in our first Project
* went to an LGBTuring lunch
* went to Hamburger Mary's with the LGBTuring group
* volunteered to TA for Girl Develop It Intro to Ruby this Saturday

## Review

### Notes

* Technical skill is very strong
* Individual projects are consistently exceeding expectations
* Team Project results show that you are able to drive your teams
to success, and much of this is obviously because of your ability
* You seem to have a very positive effect on the community around you
in a way that elevates everyone's performance

### Outcome

* Assessment - 4
* Individual Work - 4
* Team Projects - 4
* Community Involvement - 4
* Feedback - 4

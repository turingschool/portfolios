# Joe Perry - Module 1 Portfolio


## Individual

#### Your Mission

My personal goal in coming to Turing was to learn how to learn again. After years of work that, while rewarding and demanding, lacked intellectual stimulus, I've set out to challenge myself once again and learn a new skill.

I feel as though I've learned a lot during my first module at Turing, and I look forward to all of the new challenges I'll face in the coming modules.


#### End of Module Assessment

Challenge: Calculate All Possible Words

Assessed By: Jeff Casimir

#### Notes:

* Fine start with writing an initial test
* Don't think too much -- analysis paralysis -- just write code
* Some rough spots with enumerables -- knowledge is there just not quick

#### Scores:

1. Ruby Syntax & API = 2
2. Ruby Style = 2
3. Blocks & Enumerations = 2
4. Testing = 3
5. Workflow = 3
6. Collaboration = 3


#### End of Module Reassessment

Challenge: Implement Multipliers

Assessed By: Mike Dao

#### Notes:

#### Scores:

1. Ruby Syntax & API = 3
2. Ruby Style = 3
3. Blocks & Enumerations = 4
4. Testing = 3
5. Workflow = 3
6. Collaboration = 3


#### Attendance

I had no absences during module 1.


## Team

### Projects

A list of all module 1 project and assessment scores.


### Sorting Suite

A suite of logic to handle bubble, insertion, and merge sorts with benchmarking.

JP reviewed by Brennan Holtzclaw

https://github.com/jwperry/1project_repo

#### Scores:

Functional - 4
Testing - 4
Style - 4
Organization - 3

#### Notes:

Functionality -  I feel like a reversed array and pre-sorted arrays should be able to be sorted, aside from that, you've done the extensions, and it's easily a 4.
Organization -  Need to get proper "Require Relative" control when referencing other files, other than that it's a 4.

The sorts are really easy to read. As the sorts grow in complexity it gets a little harder, but with the comments it's easy to understand what's happening. Tests are similarly well named. They're quite long, but I know exactly what they're doing. I also appreciate the standardization across all tests and sorts. Style is good (to my untrained eye). The extra spacing for the comments might go against some convention, but I like how it looks.


### Night Writer

Conversion between standard English and braille represented as a 2x3 grid with file I/O.

JP reviewed by Horace Williams

https://github.com/jwperry/2project_repo

#### Scores:

Overall Functionality - 2
Fundamental Ruby & Style - 2
Test-Driven Development - 1
Breaking Logic into Components - 3

#### Notes:

Good functionality and completion.
Method chaining design is a little wonky; could be re-worked to be adjacent method calls.
Look out for opportunities to leverage more enumerable methods instead of just using each (especially map -- watch for cases where we create an empty string or array and shovel into it).
Testing needs work; the restructurings mentioned above will help greatly with this.
Probably have opportunities to extract more separate classes as well -- think about what the overall steps of the night writer process are and how could we pull these apart.


### Binary Search Tree

Binary search tree including sorting, searching, and insertion functionality.

JP reviewed by Mike Dao

https://github.com/jwperry/3project_repo

#### Scores:

Functional Expectations: 4
Test-Driven Development: 3
Encapsulation / Breaking Logic into Components: 4
Fundamental Ruby & Style: 3
Enumerable & Collections: 3

#### Notes:

48 total tests, all pass.
Good use of recursion.
Some opportunity to refactor by pulling out conditionals to their own methods.
All extensions Complete.


### Complete Me

Text auto-completion engine built from n-dimensional trie structure for efficient searching.

JP reviewed by Horace Williams

https://github.com/jwperry/4project_repo

#### Scores:

Functional Expectations: 4
TDD: 3
Ruby Style & Fundamentals: 3
Encapsulation / Breaking Logic Into Components: 3
Enumerable & Collections: 3

#### Notes:

Strong functionality; base works with 1 extension.
Some words seem to be disappearing on insert (or not getting counted); would be curious to figure out where these are going.
Word selection works and handles subsequent selections within the same substring.
Good ideas around separating objects between trie/node/top-level completion; possibly the interface between trie and complete me could be smoothed a bit to remove some of the extra cases in the top-level.


### http Yeah You Know Me

Rudimentary web server built to respond to requests and include guessing game functionality.

JP reviewed by Horace Williams

https://github.com/jwperry/5project_repo

#### Scores:

Overall Functionality 3:
Fundamental Ruby & Style 3:
Test-Driven Development 3:
Breaking Logic into Components 3:

#### Notes:

Functionality: Application implements four iterations.
Style: Application shows some effort toward organization but still has 6 or fewer long methods (> 8 lines) and needs some refactoring.
TDD: Application uses tests to exercise core functionality and some edge cases, but fails to break out component objects/tests.
Logical Separation: Application has multiple components with defined responsibilities but there is some leaking of responsibilities.

Good functionality hitting up to I5.
Testing is good; using relatively clear inputs and outputs to test the logic in isolation of the HTTP server.
Don't love the rigid approach to parsing body vs. headers; leads to some weird behavior if you use different clients or browsers.
Also would have simplified test data if we were able to take a different approach to parsing the inputs.
Overall abstraction of Server class to handle responsibilities is good, but there are other tasks that could have been split out of it -- esp. Path/Action identification; Response generation and formatting; actual action performance.
Testing covers main paths and usage pretty well but didn't turn up some prominent edge-cases.


### Headcount

Parses, stores, and analyzes Denver public school data stored in CSV files.

JP reviewed by Andrew Carmer

https://github.com/jwperry/headcount_repo

#### Scores:

Functional Expectations: 3
Test-Driven Development: 3
Encapsulation / Breaking Logic into Components: 3
Fundamental Ruby & Style: 3
Enumerable & Collections: 3
Code Sanitation: 4

#### Notes:

A little complicated at times, but over all functional. Some ruby style and api issue like using 'return' often. Some variable name issues, but most of the times short variable names could have been considered appropriate. Some long methods that violated SRP but method names were excellent. Some refactoring would have helped overall. Some concern with over complication. Some of the refactoring was really good, like pulling out truncate and we talked about other things they would have wanted to do.


## Community

#### Giving Feedback

Brant Wellman:

Over the past few weeks, I've come to see Brant as a true asset to the Turing community. Brant has been a pillar of support for myself and many other students. Always eager to engage with his fellow students, he makes himself available to assist others even at the expense of his own work time. As a member of the student advisory board, he has established himself as a leader and a trustworthy person to confide in. In pairing, Brant shows himself to be intelligent, expressive, and an excellent communicator who excels at approaching problems with solid fundamentals and planning.


Greg Armstrong:

Over the course of the module, I've come to know Greg as a remarkably enthusiastic and outgoing person. Having had the opportunity to pair with him on the OkCuGit exercise, I can safely say that I look forward to having the opportunity to pair with him on a larger project. In our pairing, we quickly hit a natural rhythm for our interaction. Greg excelled at communication and displayed a diverse set of tools for problem solving. He was eager to contribute, very positive, and a pleasure to work with!


Penney Garrett:

Penney is an absolutely fantastic person to work with. She is unrelentingly positive and eager to contribute. She makes excellent use of pairing techniques, and does a great job of following good development and testing practices!


Jordan Lawler:

Jordan is easily one of the most outgoing people in our cohort. Easy to talk to and friendly to everyone, pairing with him is an absolute pleasure. From a coding perspective, the thing that most impresses me about Jordan is his ability to diagnose problems and debug. He has an exceptional ability to trace errors, and is one of the first people I turn to when I've backed myself into a corner. I look forward to having the opportunity to work with him on a larger project!


Steve Olson:

I had the opportunity to work with Steve on our http project and couldn’t have asked for a better partner. Steve showed himself to be reliable, communicative, and an organized, resourceful problem solver. We quickly and organically fell into a good rhythm for pairing, and I look forward to having the opportunity to work with him again.


#### Being a Community Member

Penney Garrett:

Working with JP was fantastic. He is profoundly intelligent, patient, and respectful. I thoroughly enjoyed the way he would walk me through every step of the code when I was confused or we had been apart. I learned so much from him!


Steve Olson:

Working with JP on the http project was a great experience. The project itself was difficult and frustrating for the whole class, and JP’s patience and ability to calmly work through problems was a huge benefit for our project. I’d be glad to have him as a parter again in the future.


Brant Wellman:

JP is a strong coder and problem solver. He is very quiet and reserved, which can be fine, but it is still important to to voice your opinion and be heard. I've noticed that JP has been more expressive during the last few weeks of the module, and I think that continuing to do that will help him grow and learn in the Turing environment.


Admir Draganovic:

Being in the same cohort as JP has been a great experience. I have not yet gotten an opportunity to pair with JP directly on a project but he has helped me on occasions where I have coded myself into a corner. JP is great at explaining complex ideas and is fully invested in being member of the community. I have benefitted most to his contributions to the classroom environment. JP is constantly engaged during lecture and is very on point with his responses and questions. He has the ability to carry his positive outlook into situations that can easily turn stressful. No matter how busy he happens to be JP will make time to help his peers and I am glad to have had the opportunity to build a friendship with him.


Brennan Holtzclaw:

JP has been a great help through this first module at Turing. He is very approachable (despite the beard and long hair) and it seems like he could easily be everyone’s friend. If you’ve got a problem with code, logic, or your D&D character’s backstory, JP is the man with a plan. He’s consistently been there when I needed a hand, and I think he’ll be a huge asset to future cohorts here at Turing.


#### Playing a Part

I've participated in the larger Turing Community in the following ways:

* Have participated in weekly Lunch Roulettes and have taken initiative to create Slack channels to begin dialogue.
* Have attended all 1510 module team building exercises, and 1510 field day.
* Have participated in morning exercises with Goldberg posse members.
* Have done my best to be accessible and approachable to peers needing advice or support.
* Have paired remotely with mentors to build relationships and enhance my knowledge.
* Have attended weekly Elixir Club meetings.
* Began Turing D&D group for 1510 members.
* Have assisted with workspace cleanup with Goldberg posse.
* Have attended weekly lightning talks and student-led sessions.


## Review


#### Notes:


#### Outcome:


#### A: End-of-Module Assessment
A Turing student is able to demonstrate proficiency at programming in accordance with the module's content and expectations.

4: Student achieved two or more "4s" on the assessment

3: Student achieved a "3" or better on each category of the assessment

2: Student earned one score below "3" on the assessment

1: Student earned two or more scores below "3" on the assessment


#### B: Individual Work & Projects
A Turing student works to maximize their skill growth and demonstrates that skill across a variety of work.

4: Student demonstrates excellent growth by not only achieving satisfactory evaluations for each project but also pushing their learning beyond expectations.

3: Student demonstrates commitment and growth in their work through satisfactory evaluations of each project or a clearly upward-sloping trend.

2: Student demonstrates some lack of engagement or growth in their individual skill or project outcomes without a clear upward trend.

1: Student does not show the commitment expected of Turing students.


#### C: Group Work & Projects
A Turing student contributes significantly to group projects, helps the team develop their technical skills, and delivers a high-quality product.

4: Student consistently helps their teammates be their best selves, learn at an accelerated pace, and achieve great results.

3: Student fully participates in their group work to facilitate group harmony while achieving consistently satisfactory results.

2: Student participates somewhat in their group work but is either not a dependable member of the team or achieves consistently sub-par work.

1: Student is not a valuable member of their teams.


#### D: Community Participation
A Turing student builds up the community around them by participating and supporting other students, the larger Turing family, and persons outside our walls who want to develop their own skills.

4: Student has a significant positive impact on the learning and spirit of the people around them.

3: Student participates in required activities and does at least one or two above-and-beyond supports of the community.

2: Student participates in most required community activities (demos, lightning talks, etc) but does not do anything else of significance.

1: Student stays in their lane and focuses just on their own learning.


#### E: Peer & Instructor Feedback
A Turing student accelerates the growth of those around them by delivering specific, kind, and actionable feedback. They accelerate their own growth by taking in and acting on the feedback of their peers and instructors.

4: Student helps others to be their best selves while using peer feedback to shape their own character and behavior.

3: Student consistently delivers meaningful feedback for peers and implements strategies to improve themselves in response to feedback.

2: Student gives meaningful impact to peers as well as being aware of themes in the feedback they receive.

1: Student does not consistently participate in or construct meaningful peer feedback.